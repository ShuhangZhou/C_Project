Q1.1:给定一个排好序的数组，消除里面重复的元素,重复元素只保留一个怎么做
void removeDup(vector<int> &A) {
	int n = A.size();
	if (n <= 1) {
		return;
	}
	int index = 1;
	for (int i = 1; i < n; i++) {
		if (A[index - 1] != A[i]) {
			A[index++] = A[i];
		}
	}
	A.erase(A.begin() + index, A.end());
}

Q1.2: 保留两个
void removeDup2(vector<int> &A) {
	int n = a.size();
	if (n <= 2) {
		return;
	}
	int index = 2;
	for (int i = 2; i < n; i++) {
		if A[index - 2] != A[i]) {
			A[index++] = A[i];
		}
	}
	A.erase(A.begin() + index, A.end());
}

Q1.3 全部不保留
void removeDup3(vector<int> &A) {
	int n = a.size();
	if (n <= 1) {
		return;
	}
	bool flag = false;
	int index = 0;
	for (int i = 1; i < n; i++) {
		if (A[i] == A[index]) {
			flag = true;
		} else if (flag) {
			A[index] = A[i];
			flag = false;
		} else {
			A[++index] = A[i];
		}
	}
	A.erase(A.begin() + index, A.end());
}

Q1.4, unsorted array,  deduplication repeatedly.
void removeDup4(vector<int> &A) {
	int n = A.size();
	if (n <= 1) {
		return;
	}
	vector<int> st;
	st.push_back(A[0]);
	for (int i = 1; i < n;) {
		if (!st.empty() && A[i] == st.back()) {
			while (i < n && A[i] == st.back()) {
				i++;
			}
			st.pop_back();
		} else {
			st.push_back(A[i]);
			i++;
		}
	}
	reverse(st.begin(), st.end());
	A = st;
}	

Q2.1 最小次数找到largest and smallest
分成small组和large组分别搜索，共n/2+n/2+n/2 = 1.5n
void findmaxmin(vector<int> a, int &max, int &min) {
	vector<int> smalla;
	vector<int> largea;
	int n = a.size();
	int odd = n % 2;
	if (odd == 1) {
		smalla.push_back(a[0]);
	}
	for (int i = odd; i <= n / 2; i++) {
		int tmp = 2 * i - odd;
		if (a[tmp] >= a[tmp + 1]) {
			smalla.push_back(a[tmp+1]);
			largea.push_back(a[tmp]);
		} else {
			smalla.push_back(a[tmp]);
			largea.push_back(a[tmp+1]);
		}
	}
	for (int i = 0; i < smalla.size(); i++) {
		if (smalla[i] < min) {
			min = smalla[i];
		}
		if (i < largea.size() && largea[i] > max) {
			max = largea[i];
		}
	}
}

Q2.2 最少比较找出1st and 2nd largest;
两两比较并记录每个数比较历史，从1st比较历史里面找2nd
			

Q3. 2D array print in spiral order or rotate
Q3.1: How to print 2D array in spiral order （NxN）
void printa(vector<vector<int>> a, int size) {
	for (int i = 0; i < size; i++) {
		for (int j = 0; j < size; j++) {
			cout<< a[i][j] << " ";
		}
		cout << endl;
	}
}
void getspiral(vector<vector<int>> a, int offset, int size, int counter) {
	if (size == 1) {
		a[offset][offset] = counter;
		printa(a,a[0].size());
		return;
	}
	for (int i = 0; i < size-1; i++) {
		a[offset][offset + i] = counter++;
	}
	for (int i = 0; i < size-1; i++) {
		a[offset + i][offset + size - 1] = counter++;
	}
	for (int i = 0; i < size-1; i++) {
		a[offset + size - 1][offset + size - 1 - i] = counter++;
	}
	for (int i = 0; i < size-1; i++) {
		a[offset + size - 1 - i][offset] = counter++;
	}
	getspiral(a, offset + 1, size - 2, counter);
}


Q4.1: BFS print binary tree

void PrintBT(TreeNode *root) {
	if (root == NULL) {
		return;
	}
	vector<TreeNode*> queue;
	queue.push_back(root);
	while (!queue.empty()) {
		int size = queue.size();
		for (int i = 0; i < size; i++) {
			Node* tmp = queue[i].pop_back();
			cout << tmp->value << ' ';
			if (tmp->lchild != NULL) {
				queue.push_back(tmp->lchild);
			}
			if (tmp->rchild != NULL) {
				queue.push_back(tmp->rchild);
			}
		}
		cout << endl;
	}
}

Q4.2: ZigZag Print binary tree
void ZigZagPrintBT(TreeNode* root) {
	vector<TreeNode*> queue;
	queue.push_back(root);
	bool odd = true;
	while (!queue.empty()) {
		int size = queue.size();
		for (int i = 0; i < size; i++) {
			Node* tmp = queue[i].pop_back();
			cout << tmp->value << ' ';
			if (odd) {
				if (tmp->lchild != NULL) {
					queue.push_back(tmp->lchild);
				}
				if (tmp->rchild != NULL) {
					queue.push_back(tmp->rchild);
				}
			} else {
				if (tmp->rchild != NULL) {
					queue.push_back(tmp->lchild);
				}
				if (tmp->lchild != NULL) {
					queue.push_back(tmp->rchild);
				}
			}			
		}
		queue.reverse(queue.begin() , queue.end());
		odd=!odd;
		cout << endl;
	}
}




Q5 (Tree) Lowest Common Ancestor
Q5.1 have two pointers pointing to the children
TreeNode* LCA(TreeNode* root, TreeNode* a, TreeNode* b) {
	if (root == NULL) {
		return NULL;
	}
	if (root == a || root == b) {
		return root;
	}
	TreeNode* left = LCA(root->leftchild, a, b);
	TreeNode* right = LCA(root->rightchild, a, b);
	if (left == NULL && right == NULL) {
		return root;
	} else {
		return left ? left : right;
	}
}
