1,retain only the nodes in range for BST [min, max], change the structure minimized

TreeNode* delete(TreeNode* root, int min, int max) {
	if (root == NULL) {
		return NULL;
	}
	if (root->value < min) {
		// root.left X
		// root.right ?
		return delete(root->right, min, max);
	}
	if (root->value > max) {
		return delete(root->left, min, max);
	}
	root->left = delete(root->left, min, max);
	root->right = delete(root->right, min, max);
	return root;
}


2. recursively remove all the trailing zero nodes from leaves, binary tree only 0 or 1 nodes

TreeNode* deleteZero(TreeNode* root){
	if(root == NULL)
		return NULL;
	root->left = deleteZero(root->left);
	root->right = deleteZero(root->right);
	if(root->left == NULL && root->right == NULL && root->val == 0)
		return NULL;
	return root;
}


3. heapify a complete binary tree

void heapify(TreeNode* root) {
	if (root->left == NULL && root->right == NULL) return;
	if (root->left != NULL) {
		heapify(root->left);
	}
	if (root->right != NULL) {
		heapify(root->right);
	}
	TreeNode* p = root;
	while (true) {
		if (p->left == NULL && p->right == NULL) {
			break;
		}
		if (p->right == NULL) {
			if (p->value < p->left->value) {
				swap(p, p->left);
			}
			break;
		}
		if (p->value < p->left->value && p->right->value < p->left->value) {
			swap(p, p->left);
			p = p->left;
		} else if (p->value < p->right->value && p->left->value < p->right->value) {
			swap(p, p->right);
			p = p->right;
		} else {
			break;
		}
	}
}


4.The border views of binary tree
a) the most left path (start from root, always go left, the nodes on the path)
b) all the leaves
c) the most right path (µ¹Ðò)

void view(TreeNode * root, int flag1, int flag2) {
	if (root == NULL) {
		return;
	}
	if (flag1 == 0 || (root->left == NULL && root->right == NULL)) {
		cout << root -> value ;
	}
	view(root->left, flag1, 1);
	view(root->right,1, flag2);
	if (flag2 == 0 && (root->left != NULL || root->right != NULL) && flag1 == 1) {
		cout << root -> value;
	}
}

