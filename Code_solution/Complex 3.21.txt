Q1 Given arrival and departure times of all trains that reach a station, find the minimum number of platforms required for the railway station so that no train wait for a platform to enter.
Examples:
Input:  arr[]  = {9:00,  9:40, 9:50,  11:00, 15:00, 18:00}
         dep[]  = {9:10, 12:00, 11:20, 11:30, 19:00, 20:00}
Output: 3

int MinPlatform(vector<int> arr, vector<int> dep) {
	int n = arr.size();
	sort(arr.begin(), arr.end());
	sort(dep.begin(), dep.end());
	int result = 1, count = 1;
	int i = 1, j = 0;
	while (i < n && j < n) {
		if (arr[i] < dep[j]) {
			count ++;
			i++;
			if (count > result) result = count;
		} else {
			count --;
			j++;
		}
	}
	return result;
}



Q2 Given a string S that represents a number, such as  ¡°12345¡±, find the length of the longest substring of S whose length = 2 * L, such that the sum of all digits in the left part (of size L) of S is equal to the sum of all digits in the right part (of size L).

Examples:
Input: str = "1233121"
Output: 6 (left part sum = 1+2+3,  right part sum = 1+2+3)


int Longest(string str) {
	int n = str.size();
	int maxlen = 0;
	int sum[n][n];
	for (int i = 0; i < n; i++) {
	sum[i][i] = str[i] - ¡®0¡¯;
	}
	for (int len = 2; len <= n; len++) {
		for (int i = 0; i < n - len + 1; i++) {
			int j = i + len - 1;
			int mid = i + (j - i) / 2;
			sum[i][j] = sum[i][mid] + sum[mid + 1][j];
			if (len % 2 == 0 && sum[i][mid] == sum[mid + 1][j] && len > maxlen) {
				maxlen = len;
			}
		}
	}
	return maxlen;
}


Q3 Given a 2D Array of ¡®0¡¯ and ¡®1¡¯, replace ¡®0¡¯¡¯ with ¡®1¡¯ if  the areas of ¡°0¡± is fully surrounded by ¡®1¡¯. Examples:
Input: mat[6][6] =  
                    {{'1', '0', '1', '1', '1', '1'},
                     {'1', '0', '1', '1', '0', '1'},
                     {'1', '1', '1', '0', '0', '1'},
                     {'0', '1', '1', '1', '1', '1'},
                     {'1', '1', '1', '0', '1', '0'},
                     {'0', '0', '1', '0', '0', '0'},
                    };



void BFSchange(vector<vector<int>> &mat, stack<pair<int, int>> &BFS) {
	int n = mat.size();
	int m = mat[0].size();
	while(!BFS.empty()) {
		Pair<int, int> p = BFS.top();
		BFS.pop();
		int x = p->first;
		int y = p->second;
if (x +1 < row && mat[x+1][y] == 2) {
	mat[x+1][y] == 0;
          BFS.push(make_pair(x+1, y));
}
if (x -1 >= 0 && matrix[x-1][y] == 2) {
	mat[x-1][y] == 0;
          BFS.push(make_pair(x-1, y));
}
if (y +1 < col && mat[x][y+1] == 2) {
	mat[x][y+1] == 0;
          BFS.push(make_pair(x, y+1));
}
if (y-1 >= 0 && mat[x][y-1] == 2) {
	mat[x][y-1] == 0;
          BFS.push(make_pair(x, y -1));
}
}
}
void ReplaceZero(vector<vector<int>> mat) {
	int n = mat.size();
	int m = mat[0].size();
	for (int i = 1; i < n - 1; i++) {
		for (int j = 1; j < n - 1; j++) {
			if (mat[i][j] == 0) {
				mat[i][j] = 2;
			}
		}
	}
	stack<pair<int, int>> BFS;
	for (int i = 0; i < n; i++) {
		if (mat[i][0] == 0) BFS.push_back(make_pair(i, 0));
		BFSchange(mat, BFS);
		if (mat[i][m - 1] == 0) BFS.push_back(make_pair(i, m - 1));
		BFSchange(mat, BFS);
	}
	for (int j = 0; j < m; j++) {
		if (mat[0][j] == 0) BFS.push_back(make_pair(0, j));
		BFSchange(mat, BFS);
		if (mat[n - 1][j] == 0) BFS.push_back(make_pair(n - 1, j));
		BFSchange(mat, BFS);
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (mat[i][j] == 2) {
				mat[i][j] = 1;
			}
		}
	}
}

Q4  Given a sorted array (sorted in nondecreasing order) of positive numbers, find the smallest positive integer value that cannot be represented as sum of elements of any sub-sequence of the given array. 
Examples:
Input:  arr[] = {1, 3, 6, 10, 11, 15};
Output: 2

Input:  arr[] = {1, 1, 1, 1};
Output: 5



assume A[0] .. A[i] can represents 1 to X, then when we check A[i + 1]
if (A[i + 1] > X + 1) then X+1 is the first integer cannot be represents.
  else if (A[i + 1] <= X + 1)  A[0] .. A[i + 1] can represents 1 to X + A[i + 1], update it.

int FindSmallest(vector<int> arr) {
	int result = 1;
for (int i = 1; i < arr.size(); i++) {
if (A[i] <= result) {
	result += A[i];
} else {
	break;
}
}
return result;	
}
